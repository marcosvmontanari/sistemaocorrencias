console.log("üîπ Script cadastrar_ocorrencia.js carregado como m√≥dulo!");

// üî∏ Fun√ß√£o principal chamada ao importar este m√≥dulo
export function init() {
    console.log("üî∏ Inicializando m√≥dulo cadastrar_ocorrencias.js");

    // üîπ Carrega Bootstrap Icons dinamicamente (caso n√£o esteja presente)
    carregarBootstrapIcons(() => {
        carregarAlunos();  // carrega alunos e s√≥ depois aplica os √≠cones
    });

    // ‚úÖ Verifica se o usu√°rio est√° autenticado
    const usuario = JSON.parse(sessionStorage.getItem("usuario"));
    if (!usuario) {
        console.error("‚ùå Acesso negado! Redirecionando para o login...");
        window.location.href = "../index.html";
        return;
    }

    // ‚úÖ Atualiza o nome do usu√°rio na navbar
    const userWelcome = document.getElementById("userWelcome");
    if (userWelcome) {
        userWelcome.textContent = `Bem-vindo, ${usuario.nome}`;
    }

    // ‚úÖ Carrega alunos e infra√ß√µes ao abrir o m√≥dulo
    carregarInfracoes();

    // ‚úÖ Evento de envio do formul√°rio de ocorr√™ncia
    const formOcorrencia = document.getElementById("formOcorrencia");
    if (formOcorrencia) {
        formOcorrencia.addEventListener("submit", function (event) {
            event.preventDefault();
            cadastrarOcorrencia(usuario);
        });
    }
}

// üî∏ Carrega Bootstrap Icons dinamicamente
function carregarBootstrapIcons(callback) {
    const existeLink = document.querySelector('link[href*="bootstrap-icons"]');
    if (!existeLink) {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css';
        link.onload = () => {
            console.log("‚úÖ Bootstrap Icons carregado.");
            if (callback) callback();
        };
        document.head.appendChild(link);
    } else {
        if (callback) callback();
    }
}

// üî∏ Fun√ß√£o para carregar alunos no select (exibindo turma e curso)
async function carregarAlunos() {
    try {
        console.log("üîπ Buscando alunos no servidor...");

        const resposta = await fetch(`${BASE_URL}/alunos/todos`);
        if (!resposta.ok) throw new Error("‚ùå Falha ao buscar alunos!");

        const data = await resposta.json();
        const alunos = data.alunos;

        console.log("üî∏ Dados de alunos recebidos:", alunos);

        const selectAluno = document.getElementById("aluno");
        if (!selectAluno) {
            console.error("‚ùå Elemento <select id='aluno'> n√£o encontrado!");
            return;
        }

        // Limpa o select e adiciona o item padr√£o
        selectAluno.innerHTML = `<option value="">Selecione o aluno...</option>`;

        // Popula o select com os alunos
        alunos.forEach(aluno => {
            const turma = aluno.turma || "Sem turma";
            const curso = aluno.curso || "Sem curso";

            const option = document.createElement("option");
            option.value = aluno.id;
            option.textContent = `${aluno.nome} - ${turma} / ${curso}`;

            selectAluno.appendChild(option);
        });

        // ‚úÖ Inicializa o Select2 para o campo Aluno
        $('#aluno').select2({
            theme: 'bootstrap4',
            placeholder: "Selecione os alunos...",
            allowClear: true,
            width: '100%',
            closeOnSelect: false,
            tags: false,
            language: {
                noResults: function () {
                    return "Nenhum aluno encontrado";
                }
            }
        });

        // üîπ Aplica √≠cones Bootstrap nas bolhas do Select2
        function aplicarIconesSelect2() {
            document.querySelectorAll('.select2-selection__choice').forEach(choice => {
                if (!choice.querySelector('.bi')) {
                    const icon = document.createElement("i");
                    icon.className = "bi bi-x-lg";
                    icon.style.marginRight = "6px";
                    icon.style.cursor = "pointer";

                    icon.onclick = () => {
                        const removeBtn = choice.querySelector('.select2-selection__choice__remove');
                        if (removeBtn) removeBtn.click();
                    };

                    choice.prepend(icon);
                }
            });
        }

        // ‚úÖ Aplica os √≠cones ap√≥s carregar
        setTimeout(aplicarIconesSelect2, 150);

        // ‚úÖ Reaplica ao alterar sele√ß√£o
        $('#aluno').on('change', aplicarIconesSelect2);

        console.log("‚úÖ Select2 de alunos aplicado com sucesso!");

    } catch (error) {
        console.error("‚ùå Erro ao carregar alunos:", error);
        Swal.fire({
            icon: 'error',
            title: 'Erro ao carregar alunos!',
            text: 'Verifique sua conex√£o ou tente novamente.'
        });
    }
}

// üî∏ Fun√ß√£o para carregar tipos de infra√ß√£o no select
async function carregarInfracoes() {
    try {
        console.log("üîπ Buscando infra√ß√µes...");

        const resposta = await fetch(`${BASE_URL}/infracoes`);
        if (!resposta.ok) throw new Error("‚ùå Falha ao buscar infra√ß√µes!");

        const infracoes = await resposta.json();

        const selectInfracao = document.getElementById("tipo_infracao");
        if (!selectInfracao) {
            console.error("‚ùå Elemento <select id='tipo_infracao'> n√£o encontrado!");
            return;
        }

        // Limpa o select e adiciona o item padr√£o
        selectInfracao.innerHTML = `<option value="">Selecione a infra√ß√£o...</option>`;

        // Popula o select com as infra√ß√µes
        infracoes.forEach(infracao => {
            const option = document.createElement("option");
            option.value = infracao.id;
            option.textContent = `${infracao.tipo} - ${infracao.descricao}`;

            selectInfracao.appendChild(option);
        });

        // ‚úÖ Inicializa o Select2 para o campo Infra√ß√£o
        $('#tipo_infracao').select2({
            theme: 'bootstrap4',
            placeholder: "Selecione a infra√ß√£o...",
            allowClear: true,
            width: '100%',
            language: {
                noResults: function () {
                    return "Nenhuma infra√ß√£o encontrada";
                }
            }
        });

        console.log("‚úÖ Select2 de infra√ß√µes aplicado com sucesso!");

    } catch (error) {
        console.error("‚ùå Erro ao carregar infra√ß√µes:", error);
        Swal.fire({
            icon: 'error',
            title: 'Erro ao carregar infra√ß√µes!',
            text: 'Verifique sua conex√£o ou tente novamente.'
        });
    }
}

// üî∏ Fun√ß√£o para enviar o formul√°rio de cadastro de ocorr√™ncia
async function cadastrarOcorrencia(usuario) {
    try {
        console.log("üîπ Preparando envio de ocorr√™ncia...");

        const formData = new FormData();

        const alunosSelecionados = $('#aluno').val();
        if (!alunosSelecionados || alunosSelecionados.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Selecione pelo menos um aluno!',
            });
            return;
        }

        alunosSelecionados.forEach(id => formData.append("alunos[]", id));

        formData.append("infracao", document.getElementById("tipo_infracao").value);
        formData.append("local", document.getElementById("local").value);
        formData.append("descricao", document.getElementById("descricao").value);
        formData.append("dataHora", document.getElementById("data_hora").value);
        formData.append("servidor", usuario.id);

        const imagem = document.getElementById("imagem").files[0];
        if (imagem) {
            formData.append("imagem", imagem);
        }

        const resposta = await fetch(`${BASE_URL}/ocorrencias/cadastrar`, {
            method: "POST",
            body: formData
        });

        if (resposta.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Ocorr√™ncia(s) cadastrada(s) com sucesso!',
                showConfirmButton: false,
                timer: 2000
            });
            setTimeout(() => window.location.reload(), 2000);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Erro ao cadastrar ocorr√™ncia!',
                text: 'Tente novamente.'
            });
        }

    } catch (error) {
        console.error("‚ùå Erro ao cadastrar ocorr√™ncia:", error);
        Swal.fire({
            icon: 'error',
            title: 'Erro ao conectar com o servidor!',
            text: 'Verifique sua conex√£o ou tente novamente.'
        });
    }
}

// üî∏ Fun√ß√£o de logout (caso necess√°rio)
function logout() {
    console.log("üîπ Logout...");
    sessionStorage.removeItem("usuario");
    window.location.href = "../index.html";
}
