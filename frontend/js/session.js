console.log("üîπ session.js carregado!");

// ‚úÖ Prote√ß√£o para p√°ginas privadas (N√ÉO colocar no index.html)
function verificarSessao() {
    const usuario = JSON.parse(sessionStorage.getItem("usuario"));

    if (!usuario) {
        console.warn("üö´ Sess√£o n√£o encontrada. Redirecionando para login...");
        window.location.href = "../index.html"; // ou apenas index.html dependendo da estrutura de pastas
    }

    // Atualiza o nome do usu√°rio no elemento userWelcome, se existir
    const userWelcome = document.getElementById("userWelcome");
    if (userWelcome && usuario) {
        userWelcome.textContent = `Bem-vindo, ${usuario.nome}`;
    }
}

// ‚úÖ Fun√ß√£o de logout (pode ser chamada manualmente ou pelo timer)
function logout() {
    console.log("üîê Logout efetuado.");
    sessionStorage.removeItem("usuario");
    window.location.href = "../index.html";
}

// ‚úÖ Verifica√ß√£o inicial ao carregar a p√°gina
verificarSessao();

/* =====================================================================
üîπ A partir daqui come√ßa o controle de sess√£o por inatividade
===================================================================== */

// ‚úÖ Impede redeclara√ß√£o caso o session.js seja carregado mais de uma vez
if (typeof TEMPO_MAXIMO_INATIVIDADE === "undefined") {

    // Tempo m√°ximo de inatividade em MILISSEGUNDOS (exemplo: 10 minutos)
    const TEMPO_MAXIMO_INATIVIDADE = 10 * 60 * 1000; // 10 minutos
    let timerInatividade = null;

    // üî∏ Fun√ß√£o para deslogar automaticamente por inatividade
    function logoutPorInatividade() {

        // ‚úÖ ALERTA ORIGINAL COMENTADO:
        // alert("‚è∞ Sess√£o expirada por inatividade! Fa√ßa login novamente.");
        // logout();

        // ‚úÖ NOVO ALERTA COM SWEETALERT2
        Swal.fire({
            icon: 'warning',
            title: 'Sess√£o expirada!',
            text: 'Fa√ßa login novamente.',
            confirmButtonText: 'OK'
        }).then(() => {
            logout();
        });
    }

    // üî∏ Fun√ß√£o que reinicia o timer sempre que o usu√°rio interage
    function resetarTimerInatividade() {
        if (timerInatividade) clearTimeout(timerInatividade);

        // Cria um novo timer para deslogar ap√≥s o tempo m√°ximo de inatividade
        timerInatividade = setTimeout(() => {
            logoutPorInatividade();
        }, TEMPO_MAXIMO_INATIVIDADE);
    }

    // üî∏ Eventos que indicam atividade do usu√°rio (podem ser ampliados se quiser)
    window.addEventListener("mousemove", resetarTimerInatividade);
    window.addEventListener("keydown", resetarTimerInatividade);
    window.addEventListener("click", resetarTimerInatividade);
    window.addEventListener("scroll", resetarTimerInatividade);

    // üî∏ Inicia o timer quando o script for carregado
    resetarTimerInatividade();

} else {
    console.warn("‚ö†Ô∏è Script session.js j√° foi carregado anteriormente. Ignorando duplica√ß√£o.");
}
